name: Generate Coverage Report

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  generate-report:
    runs-on: ubuntu-latest  # Or any other runner depending on your environment

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4

    # Setup .NET (if you're using a .NET project, change accordingly)
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
         dotnet-version: 8.0.x

    # Install ReportGenerator via NuGet (or you can install it globally if not already installed)
    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool 
     # dotnet tool install --global dotnet-reportgenerator-globaltool
     # working-directory: source/fhir-facade/tests/fhir-facade-tests  

    # Build your project (if needed)
    - name: Build project
      run: |
        dotnet build
      working-directory: source/fhir-facade


    - name: Test
      run: dotnet test --no-build --verbosity normal --logger trx --results-directory "TestResults" --collect:"XPlat Code Coverage"
      working-directory: source/fhir-facade
      
    # Run tests and generate the coverage file (adjust this for your specific testing framework)
   # - name: Run tests
   #   run:  dotnet test --collect:"XPlat Code Coverage"
   #   working-directory: source/fhir-facade/tests

    # Generate the coverage report
    - name: Generate Coverage Report
      run: reportgenerator -reports:**/coverage.cobertura.xml -targetdir:coveragereport
      working-directory: source/fhir-facade
   #   env:
   #     PATH: ${{ github.workspace }}/.dotnet/tools:$PATH  # Ensure the .NET tools path is in the environment
      

    # Upload the coverage report as an artifact (optional, if you want to view it after the job)
    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: source/fhir-facade/coveragereport/**/* 
